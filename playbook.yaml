# Clone the wabue members area

- name: "Create temporary path"
  hosts: ansible_master
  tags:
    - "always"
  tasks:
    - name: "Create temporary path"
      tempfile:
        state: "directory"
      register: "local_tempdir"

- name: "Dump database"
  tags:
    - "database"
  hosts: database_source
  tasks:
    - name: "Create temporary file"
      tempfile:
      register: "tempfile"
    - name: "Dump database"
      mysql_db:
        name: "{{ database_source_name }}"
        login_host: "{{ database_source_host }}"
        login_user: "{{ database_source_username }}"
        login_password: "{{ database_source_password }}"
        state: "dump"
        target: "{{ tempfile.path }}"
    - name: "Download dump"
      fetch:
        src: "{{ tempfile.path }}"
        dest: "{{ hostvars['ansible_master']['local_tempdir'].path }}/database.sql"
        flat: "yes"
    - name: "Cleanup"
      file:
        path: "{{ tempfile.path }}"
        state: "absent"

- name: "Fix database dump"
  tags:
    - "database"
    - "uncheckable"
  hosts: ansible_master
  tasks:
    # Uses sed command instead of replace because auf https://github.com/ansible/ansible/issues/64353
    - name: "Fix URL in php serialization"
      command: "sed -i -re 's#s:{{ url_source|length }}:{{ url_source }}#s:{{ url_destination|length }}:{{ url_destination }}#gi' {{ local_tempdir.path }}/database.sql"
    - name: "Fix URL"
      command: "sed -i -re 's#{{ url_source }}#{{ url_destination }}#gi' {{ local_tempdir.path }}/database.sql"
    - name: "Fix data path in php serialization"
      command: "sed -i -re 's#s:{{ data_folder_source|length }}:{{ data_folder_source }}#s:{{ data_folder_destination|length }}:{{ data_folder_destination }}#gi' {{ local_tempdir.path }}/database.sql"
    - name: "Fix data path"
      command: "sed -i -re 's#{{ data_folder_source }}#{{ data_folder_destination }}#gi' {{ local_tempdir.path }}/database.sql"
    - name: "Fix application path in php serialization"
      command: "sed -i -re 's#s:{{ application_folder_source|length }}:{{ application_folder_source }}#s:{{ application_folder_destination|length }}:{{ application_folder_destination }}#gi' {{ local_tempdir.path }}/database.sql"
    - name: "Fix application path"
      command: "sed -i -re 's#{{ application_folder_source }}#{{ application_folder_destination }}#gi' {{ local_tempdir.path }}/database.sql"
    - name: "Remove create db line"
      command: "sed -i -re '/CREATE DATABASE.*/d' {{ local_tempdir.path }}/database.sql"
    - name: "Remove use db line"
      command: "sed -i -re '/USE `.*/d' {{ local_tempdir.path }}/database.sql"

- name: "Restore dump"
  tags:
    - "database"
  hosts: database_destination
  tasks:
    - name: "Create temporary directory"
      tempfile:
        state: "directory"
      register: "remote_tempdir"
    - name: "Upload clean script"
      template:
        dest: "{{ remote_tempdir.path }}/dropAllTables.sql"
        src: "templates/dropAllTables.sql.jinja"
    - name: "Upload dump"
      tags:
        - "uncheckable"
      copy:
        src: "{{ hostvars['ansible_master']['local_tempdir'].path }}/database.sql"
        dest: "{{ remote_tempdir.path }}" 
    - name: "Clean database"
      mysql_db:
        name: "{{ database_destination_name }}"
        login_host: "{{ database_destination_host }}"
        login_user: "{{ database_destination_username }}"
        login_password: "{{ database_destination_password }}"
        state: "import"
        target: "{{ remote_tempdir.path }}/dropAllTables.sql"
    - name: "Import dump"
      mysql_db:
        name: "{{ database_destination_name }}"
        login_host: "{{ database_destination_host }}"
        login_user: "{{ database_destination_username }}"
        login_password: "{{ database_destination_password }}"
        state: "import"
        target: "{{ remote_tempdir.path }}/database.sql"
    - name: "Cleanup"
      file:
        path: "{{ remote_tempdir.path }}"
        state: "absent"

- name: "Clean up locally"
  tags:
    - "database"
    - "uncheckable"
  hosts: ansible_master
  tasks:
    - name: "Remove database dump"
      file:
        path: "{{ local_tempdir.path }}/database.sql"
        state: "absent"

- name: "Transfer application from source"
  tags:
    - "application"
  hosts: application_source
  tasks:
    - name: "Create temporary file"
      tempfile:
      register: "application_archive"
    - name: "Archive application folder"
      archive:
        path: 
          - "{{ application_folder_source }}/*"
          - "{{ application_folder_source }}/.htaccess"
        dest: "{{ application_archive.path }}"
        format: "bz2"
    - name: "Download application folder"
      fetch:
        src: "{{ application_archive.path }}"
        dest: "{{ hostvars['ansible_master']['local_tempdir'].path }}/application.tar.bz2"
        flat: "yes"
    - name: "Cleanup"
      file:
        path: "{{ application_archive.path }}"
        state: "absent"

- name: "Transfer application to destination"
  tags:
    - "application"
  hosts: application_destination
  tasks:
    - name: "Create temporary path"
      tempfile:
        state: "directory"
      register: "remote_tempdir"
    - name: "Copy application archive"
      tags:
        - "uncheckable"
      copy:
        src: "{{ hostvars['ansible_master']['local_tempdir'].path }}/application.tar.bz2"
        dest: "{{ remote_tempdir.path }}"
    - name: "Empty application folder"
      shell: "rm -rf * .htaccess chdir={{ application_folder_destination }}"
    - name: "Unarchive application archive"
      tags:
        - "uncheckable"
      unarchive:
        src: "{{ remote_tempdir.path }}/application.tar.bz2"
        dest: "{{ application_folder_destination }}"
        remote_src: "yes"
    - name: "Cleanup"
      tags:
        - "uncheckable"
      file:
        path: "{{ remote_tempdir.path }}"
        state: "absent"

- name: "Clean up locally"
  tags:
    - "application"
    - "uncheckable"
  hosts: ansible_master
  tasks:
    - name: "Remove application archive"
      file:
        path: "{{ local_tempdir.path }}/application.tar.bz2"
        state: "absent"

- name: "Fix application settings"
  tags:
    - "application"
    - "application_settings"
  hosts: application_destination
  tasks:
    - name: "Add dbhost"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dbhost = '{{ database_destination_host }}';"
    - name: "Add dbname"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dbname = '{{ database_destination_name }}';"
    - name: "Add dbuser"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dbuser = '{{ database_destination_username }}';"
    - name: "Add dbpass"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dbpass = '{{ database_destination_password }}';"
    - name: "Add dataroot"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->dataroot = '{{ data_folder_destination }}';"
    - name: "Add wwwroot"
      lineinfile:
        path: "{{ application_folder_destination }}/elgg-config/settings.php"
        line: "$CONFIG->wwwroot = '{{ url_destination }}';"

- name: "Transfer data folder from source"
  tags:
    - "data"
  hosts: application_source
  tasks:
    - name: "Create temporary file"
      tempfile:
      register: "data_archive"
    - name: "Archive data folder"
      archive:
        path: "{{ data_folder_source }}/*"
        dest: "{{ data_archive.path }}"
        format: "bz2"
        exclude_path:
          - "system_cache"
          - "views_simplecache"
    - name: "Download data archive"
      tags:
        - "uncheckable"
      fetch:
        src: "{{ data_archive.path }}"
        dest: "{{ hostvars['ansible_master']['local_tempdir'].path }}/data.tar.bz2"
        flat: "yes"
    - name: "Cleanup"
      tags:
        - "uncheckable"
      file:
        path: "{{ data_archive.path }}"
        state: "absent"

- name: "Transfer data folder to destination"
  tags:
    - "data"
  hosts: application_destination
  tasks:
    - name: "Create temporary path"
      tempfile:
        state: "directory"
      register: "remote_tempdir"
    - name: "Upload data archive"
      tags: 
        - "uncheckable"
      copy:
        src: "{{ hostvars['ansible_master']['local_tempdir'].path }}/data.tar.bz2"
        dest: "{{ remote_tempdir.path }}"
    - name: "Empty data folder"
      shell: "rm -rf * chdir={{ data_folder_destination }}"
    - name: "Unarchive data archive"
      tags:
        - "uncheckable"
      unarchive:
        src: "{{ remote_tempdir.path }}/data.tar.bz2"
        dest: "{{ data_folder_destination }}"
        remote_src: "yes"
    - name: "Set owner of event_calendar fork"
      file:
        path: "{{ data_folder_destination }}"
        owner: "{{ owner_destination }}"
        group: "{{ group_destination }}"
        state: "directory"
        recurse: "yes"
    - name: "Clean up"
      tags:
        - "uncheckable"
      file:
        path: "{{ remote_tempdir.path }}"
        state: "absent"

- name: "Clean up locally"
  tags:
    - "data"
    - "uncheckable"
  hosts: ansible_master
  tasks:
    - name: "Remove data archive"
      file:
        path: "{{ local_tempdir.path }}/data.tar.bz2"
        state: "absent"

- name: "Add file transport module"
  hosts: application_destination
  tasks:
    - name: "Install file transport module"
      include_tasks:
        file: "tasks/install_module.yaml"
      loop:
        - mod: "filetransport"
          url: "https://github.com/wabuehamm/elgg-plugin-filetransport/archive/master.zip"
          rename_from: "elgg-plugin-filetransport-master"
          rename_to: "filetransport"
      loop_control:
        loop_var: "module"

- name: "Run updates"
  tags:
    - "updates"
    - "updates_tasks"
  hosts: application_destination
  tasks:
    - name: "Include update tasks"
      include_tasks:
        file: "updates/{{ update_task }}.yaml"
      loop: "{{ update_tasks }}"
      loop_control:
        loop_var: "update_task"

- name: "Run database updates"
  tags:
    - "updates"
    - "updates_sql"
    - "uncheckable"
  hosts: database_destination
  tasks:
    - include_tasks:
        file: "tasks/update_tasks_sql.yaml"
      loop: "{{ update_tasks_sql }}"
      loop_control:
        loop_var: "update_task_sql"

- name: "Activate filetransport plugin"
  hosts: application_destination
  tags:
    - "uncheckable"
    - "integration"
  tasks:
    - name: "Activate filetransport plugin"
      command: "{{ php_command }} vendor/bin/elgg-cli plugins:activate -- filetransport chdir={{ application_folder_destination }}"

- name: "Configure plugins"
  hosts: application_destination
  tags:
    - "uncheckable"
  tasks:
    - name: "Put wabue plugin at the end of the plugin ist"
      tags:
        - "uncheckable"
      command: "{{ php_command }} vendor/bin/elgg-cli wabue:prioritize chdir={{ application_folder_destination }}"
    - name: "Configure plugins"
      tags:
        - "uncheckable"
      command: "{{ php_command }} vendor/bin/elgg-cli wabue:configure chdir={{ application_folder_destination }}"

- name: "Set announcement banner"
  hosts: application_destination
  tags:
    - "uncheckable"
    - "integration"
  tasks:
    - name: "Set announcement banner"
      command: "{{ php_command }} vendor/bin/elgg-cli wabue:announcement -- '{{ announcement }}' chdir={{ application_folder_destination }}"
      when: announcement != ""

- name: "Fix ownership"
  hosts: application_destination
  tasks:
    - name: "Set owner of application folder"
      file:
        path: "{{ application_folder_destination }}"
        owner: "{{ owner_destination }}"
        group: "{{ group_destination }}"
        state: "directory"
        recurse: "yes"
    - name: "Set owner of data folder"
      file:
        path: "{{ data_folder_destination }}"
        owner: "{{ owner_destination }}"
        group: "{{ group_destination }}"
        state: "directory"
        recurse: "yes"

- name: "Clean up locally"
  tags:
    - "always"
  hosts: ansible_master
  tasks:
    - name: "Remove local tempdir"
      file:
        path: "{{ local_tempdir.path }}"
        state: "absent"
